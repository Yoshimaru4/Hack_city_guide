# app.py

import os
import pandas as pd
import streamlit as st
from geopy.geocoders import Nominatim
from geopy.distance import geodesic
from streamlit_folium import st_folium
import folium
from folium.plugins import MarkerCluster
import time  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —á–∞—Ç–∞
import together
from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())

# ---------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Together API
# ---------------------------
TOGETHER_API_KEY = os.environ.get("TOGETHER_API_KEY")
MODEL_NAME = 'meta-llama/Llama-Vision-Free'
llm_client = together.Together(api_key=TOGETHER_API_KEY)

# ---------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
# ---------------------------
def configure_page():
    st.set_page_config(
        page_title="üè† –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ú–æ—Å–∫–≤–µ",
        layout="wide",
        initial_sidebar_state="expanded",
    )

# ---------------------------
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
# ---------------------------
def display_title():
    st.title("üè† –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ú–æ—Å–∫–≤–µ")
    st.markdown("""
        –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ–º–∞, –º–µ—Å—Ç–∞ –∏–ª–∏ –ø–∞–º—è—Ç–Ω–∏–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
    """)

# ---------------------------
# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# ---------------------------
def user_inputs_sidebar():
    st.sidebar.header("üîç –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    location_input = st.sidebar.text_input(
        "üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –≤ –ú–æ—Å–∫–≤–µ:",
        placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞"
    )
    use_map = st.sidebar.checkbox("üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ", value=False)
    distance_input = st.sidebar.number_input(
        "üìè –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–º–µ—Ç—Ä—ã):",
        min_value=100,
        max_value=5000,
        value=100,
        step=100
    )
    search_button = st.sidebar.button("üîé –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –æ–±—ä–µ–∫—Ç—ã")
    return location_input, use_map, distance_input, search_button

# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
# ---------------------------
@st.cache_data
def load_data(filepath):
    if not os.path.exists(filepath):
        st.error(f"–ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {filepath}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return pd.DataFrame()
    df = pd.read_csv(filepath, encoding='utf-8')
    # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞ DataFrame
    df.reset_index(inplace=True)
    df.rename(columns={'index': 'ID'}, inplace=True)
    return df

# ---------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
# ---------------------------
def initialize_session_state():
    if 'user_location' not in st.session_state:
        st.session_state.user_location = None  # –ö–æ—Ä—Ç–µ–∂ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)
    if 'search_results' not in st.session_state:
        st.session_state.search_results = None  # DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    if 'dialog_history' not in st.session_state:
        st.session_state.dialog_history = {}  # –°–ª–æ–≤–∞—Ä—å —Å ID –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –∏ —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
    if 'selected_item_id' not in st.session_state:
        st.session_state.selected_item_id = None  # –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —á–∞—Ç–∞

# ---------------------------
# –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ---------------------------
@st.cache_data
def geocode_address(address, geolocator):
    try:
        location = geolocator.geocode(address)
        if location:
            return (location.latitude, location.longitude)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞: {e}")
    return (None, None)

# ---------------------------
# –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
# ---------------------------
def calculate_distances(df, user_location):
    df['Distance_m'] = df.apply(
        lambda row: geodesic(user_location, (row['Latitude'], row['Longitude'])).meters,
        axis=1
    )
    return df

# ---------------------------
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
# ---------------------------
def display_search_results(filtered_df, distance_input):
    st.subheader(f"üìå –û–±—ä–µ–∫—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ {distance_input} –º–µ—Ç—Ä–æ–≤ –æ—Ç –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:")
    st.write(f"**–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:** {filtered_df.shape[0]}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ß–∞—Ç"
    for index, row in filtered_df.iterrows():
        cols = st.columns([1, 3, 2, 2, 1, 1])  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        cols[0].write(row['ID'])
        cols[1].write(row['Category'])
        cols[2].write(row['Name'])
        cols[3].write(row['Geo'])
        cols[4].write(f"{row['Distance_m']:.2f} –º")
        if cols[5].button("üí¨ –ß–∞—Ç", key=f"chat_button_{row['ID']}"):
            st.session_state.selected_item_id = row['ID']
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
    display_map(filtered_df)

# ---------------------------
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
# ---------------------------
def display_map(filtered_df):
    st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤:")
    folium_map = folium.Map(location=st.session_state.user_location, zoom_start=15)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    folium.Marker(
        location=st.session_state.user_location,
        popup="üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        icon=folium.Icon(color='red', icon='user')
    ).add_to(folium_map)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
    marker_cluster = MarkerCluster().add_to(folium_map)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    for _, row in filtered_df.iterrows():
        folium.Marker(
            location=(row['Latitude'], row['Longitude']),
            popup=f"{row['Name']} (ID: {row['ID']})<br>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {row['Distance_m']:.2f} –º–µ—Ç—Ä–æ–≤",
            icon=folium.Icon(color='blue', icon='info-sign')
        ).add_to(marker_cluster)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    st_folium(folium_map, width=700, height=500)

# ---------------------------
# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞
# ---------------------------
def chat(info, dialog_history):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Together API.
    –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —á–∞—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤–∞–º–∏ API.
    """
    if not llm_client:
        st.error("–ö–ª–∏–µ–Ω—Ç LLM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Together API.")
        return "–û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç LLM –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."
    
    messages = [
        {"role": "user", "content": f'–í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –ø–æ–ª–µ–∑–Ω—ã–π –∏ —à—É—Ç–ª–∏–≤—ã–π –≥–æ—Ä–æ–¥—Å–∫–æ–π –≥–∏–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π: {info} \n –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ —ç—Ç—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∞ –∑–∞–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ö–æ–≥–¥–∞ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å –≤—Å–µ, —á—Ç–æ –∑–Ω–∞–µ—à—å, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –¢—ã –ø–æ–Ω—è–ª?'}
    ]
    messages += [{"role": "assistant", "content": '–î–∞, —è –≤—Å–µ –ø–æ–Ω—è–ª! –ù–∞—á–Ω–µ–º —ç–∫—Å–∫—É—Ä—Å–∏—é?'}]
    if dialog_history:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        formatted_history = []
        for msg in dialog_history:
            formatted_history.append({"role": msg['role'], "content": msg['content']})
        messages += formatted_history

    # –í—ã–∑–æ–≤ API –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ Together
    try:
        response = llm_client.chat.completions.create(model=MODEL_NAME, messages=messages)
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ OpenAI
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
        return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."

# ---------------------------
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞
# ---------------------------
def display_chat(item_id):
    st.markdown(f"### üí¨ –ß–∞—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ID: {item_id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
    if item_id not in st.session_state.dialog_history:
        st.session_state.dialog_history[item_id] = []
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Streamlit
    for msg in st.session_state.dialog_history[item_id]:
        if msg['role'] == 'user':
            st.chat_message("user").write(msg["content"])
        elif msg['role'] == 'assistant':
            st.chat_message("assistant").write(msg["content"])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ —á–∞—Ç–∞
    prompt = st.chat_input("–í—ã:")
    
    if prompt:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        st.session_state.dialog_history[item_id].append({'role': 'user', 'content': prompt})
        st.chat_message("user").write(prompt)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ –¥–ª—è —á–∞—Ç–∞
        df = st.session_state.search_results
        info = df.loc[df['ID'] == item_id, 'Info'].values[0]
        
        # –í—ã–∑–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —á–∞—Ç–∞
        with st.spinner("ü§ñ –û—Ç–≤–µ—á–∞—é..."):
            response = chat(info, st.session_state.dialog_history[item_id])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        st.session_state.dialog_history[item_id].append({'role': 'assistant', 'content': response})
        st.chat_message("assistant").write(response)

# ---------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ---------------------------
def main():
    configure_page()
    display_title()
    initialize_session_state()
    location_input, use_map, distance_input, search_button = user_inputs_sidebar()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    data_path = os.path.join("datasets", "details_filtered.csv")
    df = load_data(data_path)

    if df.empty:
        st.stop()

    geolocator = Nominatim(user_agent="streamlit_app")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
    if use_map:
        m = folium.Map(location=[55.7558, 37.6173], zoom_start=10)
        folium.LatLngPopup().add_to(m)
        st.sidebar.markdown("### üìç –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
        with st.sidebar:
            selected_location = st_folium(m, width=280, height=400)
        if selected_location and 'last_clicked' in selected_location and selected_location['last_clicked']:
            user_lat = selected_location['last_clicked']['lat']
            user_lon = selected_location['last_clicked']['lng']
            st.session_state.user_location = (user_lat, user_lon)
        elif use_map and st.session_state.user_location is None:
            st.session_state.user_location = None  # –°–±—Ä–æ—Å, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±–æ—Ä–∞

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
    if search_button:
        with st.spinner("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞..."):
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if use_map:
                if st.session_state.user_location is None:
                    st.error("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.")
                    st.session_state.search_results = None  # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                else:
                    user_lat, user_lon = st.session_state.user_location
            else:
                if not location_input.strip():
                    st.error("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ.")
                    st.session_state.search_results = None  # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                else:
                    user_lat, user_lon = geocode_address(location_input, geolocator)
                    if user_lat is None or user_lon is None:
                        st.error("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
                        st.session_state.search_results = None  # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    else:
                        st.session_state.user_location = (user_lat, user_lon)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏

            # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if st.session_state.user_location:
                user_location = st.session_state.user_location
                # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
                df_with_dist = calculate_distances(df, user_location)
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –≤—ã–±–æ—Ä 5 –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                filtered_df = df_with_dist[df_with_dist['Distance_m'] <= distance_input].copy()
                if filtered_df.empty:
                    st.warning("üö´ –í —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    st.session_state.search_results = None  # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                else:
                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –≤—ã–±–æ—Ä 5 –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    top5_df = filtered_df.nsmallest(5, 'Distance_m').reset_index(drop=True)
                    st.session_state.search_results = top5_df

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    if st.session_state.search_results is not None:
        display_search_results(st.session_state.search_results, distance_input)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    if st.session_state.selected_item_id is not None:
        st.header("üí¨ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ß–∞—Ç–∞")
        display_chat(st.session_state.selected_item_id)

if __name__ == "__main__":
    main()
